# CI stages to execute against all branches on PR merge
name: auto_cherry_pick_commits

on:
  pull_request_target:
    types:
      - closed

jobs:
  previous-branch:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CherryPick')
    name: Calculate previous branch name
    runs-on: ubuntu-latest
    outputs:
      previous_branch: ${{ steps.set-branch.outputs.previous_branch }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: set-branch
        run: echo "::set-output name=previous_branch::$(if [ $GITHUB_BASE_REF  == 'master' ]; then echo $(git branch -rl 'origin/6.*.z' --format='%(refname:lstrip=-1)' | sort --version-sort | tail -n1 | jq -cnR '[inputs | select(length>0)]'); else echo ['"6.'$(($(echo $GITHUB_BASE_REF | cut -d. -f2) - 1))'.z"']; fi)"

  auto-cherry-pick:
    name: Auto Cherry Pick to previous branch
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CherryPick')
    needs: previous-branch
    runs-on: ubuntu-latest
    env:
      PR_AUTHOR: ${{ github.event.pull_request.user.login }}
    strategy:
      matrix:
        to_branch: ${{ fromJson(needs.previous-branch.outputs.previous_branch) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cherry pick into ${{ matrix.to_branch }}
        uses: jyejare/github-cherry-pick-action@main
        with:
          author: ${{ env.PR_AUTHOR }} <${{ env.PR_AUTHOR }}@users.noreply.github.com>
          token: ${{ secrets.CHERRYPICK_PAT }}
          branch: ${{ matrix.to_branch }}
          labels: |
            Auto_Cherry_Picked
            ${{ matrix.to_branch }}
          assignees: "${{ github.event.pull_request.assignee.login }}"

  create-issue:
    runs-on: ubuntu-latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
    needs: [previous-branch, auto-cherry-pick]
    env:
      to_branch: ${{ fromJson(needs.previous-branch.outputs.previous_branch) }}
    steps:
      - name: Create Issue on Failed Auto Cherrypick
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ secrets.CHERRYPICK_PAT }}
          title: "[Failed-AutoCherryPick] - ${{ github.event.pull_request.title }}"
          body: |
            #### Auto-Cherry-Pick WorkFlow Failure:
            - [Failed Cherrypick Action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Parent Pull Request](https://github.com/${{ github.repository }}/pull/${{ github.event.number }})
          labels: |
            Failed_AutoCherryPick
            ${{ env.to_branch }}
          assignees: "${{ github.event.pull_request.assignee.login }}"

  google-chat-notification:
    runs-on: ubuntu-latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
    needs: auto-cherry-pick
    steps:
      - name: Google Chat Notification - Robottelo
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: "${{ github.event.pull_request.title }}"
          url: ${{ secrets.GCHAT_REVIEWERS_WEBHOOK }}
          status: failure
