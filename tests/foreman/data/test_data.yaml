config:
  populator: api
  populators:
    api:
      module: robottelo.populate.api.APIPopulator
    cli:
      module: robottelo.populate.cli.CLIPopulator

vars:
  admin_username: admin
  admin_password: changeme
  org_list:
    - company7
    - company8

actions:

  - model: Organization
    register: org_1
    data:
      name: MyOrg
      label: MyOrg
#    search_options:
#      force_raw: true

  - model: Organization
    register: default_orgs
    via: api
    data:
      name: Org{{item}}
      label: Org{{item}}
    with_items: org_list
    search_query:
      name: Org{{item}}
      label: Org{{item}}

  - model: User
    register: default_users
    data:
      firstname: user{{item}}
      login: user{{item}}
      mail: user{{item}}@acme.com
      password: "123456"
      organization:
          from_registry: default_orgs
      default_organization:
          from_registry: default_orgs[loop_index]
    with_items:
      - user7
      - user8

  - model: User
    register: my_user
    data:
      firstname: Bruno
      login: bruno
      mail: bruno@rocha.com
      password: "123456"
      organization:
        from_search:
          model: Organization
          all: true
          search_options:
            per_page: 40
            filters: {}
          register: bruno_orgs
      default_organization:
        from_search:
          model: Organization
          data:
            name: Orgcompany5

  - model: Product
    echo: Creating product
    register: product
    data:
      name: stroncio
      organization:
        from_registry: default_orgs[0]

  - model: Repository
    register: reps_{{ registry.product.name }}
    data:
      name: reps_{{ registry.product.name }}
      product:
        from_registry: product


  - model: Repository
    register: yum_reps_{{ registry.product.name }}
    data:
      name: yum_reps_{{ registry.product.name }}
      product:
        from_registry: product
      content_type: yum
      url:
        from_object:
          name: robottelo.constants.FAKE_2_YUM_REPO


  - model: Repository
    register: yum_reps_dp_{{ registry.product.name }}
    data:
      name: yum_reps_dp_{{ registry.product.name }}
      product:
        from_registry: product
      content_type: yum
      download_policy: on_demand
      url:
        from_object:
          name: robottelo.constants.FAKE_0_YUM_REPO


  - action: register
    data:
      name: Bruno
      email: rochacbruno@gmail.com

  - action: register
    data:
       organization_bla:
         from_registry: default_orgs[0]
       organization_5:
         from_search:
           model: Organization
           data:
             name: Orgcompany5
       fake_repo:
         from_object:
           name: robottelo.constants.FAKE_0_YUM_REPO
       random: "{{ fauxfactory.gen_string('alpha') }}"

  - action: unregister
    data:
      - name
      - email

  - action: assertion
    operator: eq  # eq, ne, gt, lt, gte, lte, identity
    data:
      - from_registry: default_orgs[0].name
      - Orgcompany7

  - action: assertion
    log: Hey Ho Lets Go!
    operator: eq  # eq, ne, gt, lt, gte, lte, identity
    data:
      - from_object:
          name: robottelo.constants.FAKE_0_YUM_REPO
      - http://inecas.fedorapeople.org/fakerepos/zoo/

  - action: assertion
    operator: ne
    data:
      - OrgAnything_{{item}}
      - from_search:
          model: Organization
          data:
            name: Orgcompany7
          attr: name
    with_items:
      - a
      - b

# DANGER:
#  - action: update
#    model: Product
#    data:
#      name: new_prodtest
#    search_query:
#      name: new_prodtest
#      organization:
#        from_registry: default_orgs[0]
#    silent_errors: true

#  - action: delete
#    model: Product
#    search_query:
#      name: new_prodtest
#      organization:
#        from_registry: default_orgs[0]

# TODOC:
#  - model: Repository
#    data:
#      url:
#        from_object:
#          name: robottelo.constants.FAKE_REPO_1
#      thing: "{{ fauxfactory.gen_string() }}"
#      # Save last generated strings in a file
#      # for validation.

#      organization:
#        from_search:
#          model: Organization
#          data:
#            name: Orgcompany7
#          all: true
#          silent_errors: true

#      product:
#        from_search:
#          model: Product
#          data:
#            organization:
#              from_registry: default_orgs[0]
#          all: false  # default
