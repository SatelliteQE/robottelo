"""Tests for RH Cloud - Vulnerability

:Requirement: RHCloud

:CaseAutomation: Automated

:CaseComponent: Insights-Vulnerability

:Team: Proton

:CaseImportance: High

"""

import pytest

from robottelo import constants


def create_insights_vulnerability(host):
    """Function to create vulnerabilities for IoP Vulnerability Engine"""
    # Upload insights data to Satellite
    assert host.execute('insights-client').status == 0

    # Add vulnerability for glibc package - CVE-2025-8058
    assert host.execute('dnf downgrade -y glibc').status == 0


@pytest.fixture(scope='module')
def setup_content_for_iop(
    module_target_sat_insights, rhcloud_manifest_org, module_rhel_contenthost
):
    """Fixture to setup an AK with a RHEL content repos, which is used for registering a host."""
    sat = module_target_sat_insights
    rhel_ver = module_rhel_contenthost.os_version.major
    content_view = sat.api.ContentView(organization=rhcloud_manifest_org).create()

    # add IPv6 proxy for IPv6 communication
    module_rhel_contenthost.enable_ipv6_dnf_and_rhsm_proxy()

    for name in [f'rhel{rhel_ver}_bos', f'rhel{rhel_ver}_aps']:
        rh_repo_id = sat.api_factory.enable_rhrepo_and_fetchid(
            basearch=constants.DEFAULT_ARCHITECTURE,
            org_id=rhcloud_manifest_org.id,
            product=constants.REPOS[name]['product'],
            repo=constants.REPOS[name]['name'],
            reposet=constants.REPOS[name]['reposet'],
            releasever=constants.REPOS[name]['releasever'],
        )
        # Sync step because repo is not synced by default
        rh_repo = sat.api.Repository(id=rh_repo_id).read()
        task = rh_repo.sync(synchronous=False)
        sat.wait_for_tasks(
            search_query=(f'id = {task["id"]}'),
            poll_timeout=2500,
        )
        task_status = sat.api.ForemanTask(id=task['id']).poll()
        assert task_status['result'] == 'success'
        content_view.repository.append(rh_repo)
        content_view.update(['repository'])

    publish = content_view.publish()
    task_status = sat.wait_for_tasks(
        search_query=(f'Actions::Katello::ContentView::Publish and id = {publish["id"]}'),
        search_rate=15,
        max_tries=10,
    )
    assert task_status[0].result == 'success'
    content_view = sat.api.ContentView(
        organization=rhcloud_manifest_org, name=content_view.name
    ).search()[0]

    return sat.api.ActivationKey(
        organization=rhcloud_manifest_org,
        content_view=content_view,
        environment=rhcloud_manifest_org.library.id,
    ).create()


@pytest.mark.e2e
@pytest.mark.no_containers
@pytest.mark.rhel_ver_list([10])
@pytest.mark.parametrize('module_target_sat_insights', [False], ids=['local'], indirect=True)
def test_rhcloud_insights_vulnerabilities_e2e(
    request,
    module_rhel_contenthost,
    rhcloud_manifest_org,
    module_target_sat_insights,
    setup_content_for_iop,
):
    """Validate vulnerability data from local Insights,
        verify results are displayed correctly for impacted host in Satellite.

    :id: d952e83c-3faf-4299-a048-2eb6ccb8c9c3

    :steps:
        1. Enable local Insights/Red Hat Lightspeed on Satellite.
        2. Import Manifest, Sync RHEL content and create AK with the content.
        3. Register a VM using AK created.
        4. Create vulnerabilities for detection by vulnerability engine and upload its data to Insights.
        5. In Satellite UI, go to vulnerabilities tab on host details page and validate the data.

    :expectedresults:
        1. Local insights vulnerability engine detects the new vulnerabilities.
        2. Vulnerability data is displayed correctly for impacted host in Satellite.

    :verifies: SAT-30762
    """
    CVE_ID = 'CVE-2025-8058'

    result = module_rhel_contenthost.register(
        rhcloud_manifest_org,
        None,
        setup_content_for_iop.name,
        module_target_sat_insights,
        update_packages=True,
        setup_insights=True,
    )
    assert result.status == 0, f'Failed to register host: {result.stderr}'
    request.addfinalizer(lambda: module_rhel_contenthost.unregister())

    # Verify insights-client can update to latest version available from server
    assert module_rhel_contenthost.execute('insights-client --version').status == 0

    # Manual VMaaS reposcan sync task
    assert (
        module_target_sat_insights.execute(
            'curl --fail --cert /etc/foreman/client_cert.pem --key /etc/foreman/client_key.pem --cacert /etc/foreman/proxy_ca.pem -X PUT "https://localhost:24443/api/vmaas-reposcan/v1/sync"'
        ).status
        == 0
    )

    # Prepare a machine with vulnerability CVE-2025-8058 and upload data to Insights
    create_insights_vulnerability(module_rhel_contenthost)

    with module_target_sat_insights.ui_session() as session:
        session.organization.select(org_name=rhcloud_manifest_org.name)

        status = session.host_new.get_host_statuses(module_rhel_contenthost.hostname)
        assert status['Red Hat Lightspeed']['Status'] == 'Reporting'

        vulnerabilities = session.host_new.get_vulnerabilities(module_rhel_contenthost.hostname)
        assert vulnerabilities[0]['CVE ID'] == CVE_ID

        # Validate the affected host from vulnerability details and list pages
        affected_host = session.cloudvulnerability.get_affected_hosts_by_cve(CVE_ID)
        assert affected_host[0]['Name'] == module_rhel_contenthost.hostname

        # Validate the vulnerabilities tab on host details page from CVE list and CVE details
        vulnerabilities = session.cloudvulnerability.validate_cve_to_host_details_flow(
            CVE_ID, module_rhel_contenthost.hostname
        )
        assert vulnerabilities[0]['CVE ID'] == CVE_ID
