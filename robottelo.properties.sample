# Make a copy of this file named robottelo.properties
[server]
# Server hostname
hostname=

# Path to private ssh key to be used when connecting via SSH.
ssh_key=

# HTTP scheme when building the server URL
# Suggested values for "scheme" are "http" and "https".
# scheme=https

# Server port
# port=443

# SSH username
# ssh_username=root

# SSH password if not using a SSH key to connect
# ssh_password=

# Admin username when accessing API and UI
# admin_username=admin

# Admin password when accessing API and UI
# admin_password=changeme

# Override robottelo configuration
# [robottelo]
# The directory where screenshots will be saved.
# Note:- Content under /tmp may be deleted after a reboot.
# screenshots_path=/tmp/robottelo/screenshots/
# Enter only 'sat' for Satellite and 'sam' for SAM
# project=sat
# locale=en_US.UTF-8
# Update upstream=false for downstream run
# upstream=true
# Logging verbosity, one of debug, info, warning, error, critical
# verbosity=debug

# Webdriver logging options
# A list of commands to be logged
# log_driver_commands=newSession,windowMaximize,get,findElement,sendKeysToElement,clickElement,mouseMoveTo

# browser tells robottelo which browser to use when testing UI. Valid values
# are:
# * selenium
# * docker: to use a browser inside a docker container. In order to use this
#   feature make sure that the docker daemon is running locally and has its
#   unix socket published at unix://var/run/docker.sock. Also make sure that
#   the docker image selenium/standalone-firefox is available.
# * saucelabs: makes robottelo run tests on SauceLabs. The saucelabs_user and
#   saucelabs_key are required and the browser used is the same specified on
#   webdriver.  Supported values for webdriver are firefox, chrome and ie, the
#   other valid webdriver values are going to be translated to firefox.
# browser=selenium

# Webdriver to use. Valid values are chrome, firefox, ie, phantomjs
# webdriver=firefox

# Binary location for selected wedriver
# webdriver_binary=/usr/bin/firefox
# webdriver_binary=/usr/bin/chromedriver

# webdriver_desired_capabilities accepts extra configuration to be passed to
# saucelabs in order to configure the test options. You can use the platform
# configurator (see link below) to get the information about the environment
# you want to test.
# https://wiki.saucelabs.com/display/DOCS/Platform+Configurator/
# Or you can visit
# https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options for a
# complete set of options.
# PS.: the base DesiredCapabilities dict will be get by the browser
# specified by webdriver config. If you override browserName then that
# browser will be used instead.
#webdriver_desired_capabilities=platform=OS X 10.11,version=44.0,...

# saucelabs_user=
# saucelabs_key=

# cdn=true
# Run one datapoint or multiple datapoints for tests
# run_one_datapoint=false

# Enable cleanup of Organizations and Hosts at the test Teardown
# cleanup=true

# Provide link to rhel6/7 repo here, as puppet rpm would require packages from
# RHEL 6/7 repo and syncing the entire repo on the fly would take longer for
# tests to run Specify the *.repo link to an internal repo for tests to execute
# properly
# rhel6_repo=http://example.com/yum/repo_files/rhel6-updates.repo
# rhel7_repo=http://example.com/yum/repo_files/rhel7-updates.repo

# Provide link to rhel6/7 repositories URL as we need all OS packages in order
# to have real installation media for provisioning procedure
# rhel6_os=http://example.com/yum/rhel6-os/
# rhel7_os=http://example.com/yum/rhel7-os/

# If capsule and satellite tools repositories available related packages will
# be pulled from there instead of using the CDN channel. These information is
# more suited to be used for downstream, downstream-iso and zstream builds.
# capsule_repo=http://capsule/repo
# sattools_repo=http://sattools/repo

# Bugzilla data to authenticate API calls
# [bugzilla]
# username used when accessing Bugzilla's API
# bz_username=admin

# password used when accessing Bugzilla's API
# bz_password=changeme

# For LDAP Authentication.
# [ldap]
# hostname=
# username=
# password=
# basedn=
# grpbasedn=


# Fake manifest testing.
# [fake_manifest]
# URL of the base manifest
# url=http://example.org/valid-redhat-manifest.zip
# URL of the key file
# key_url=http://example.org/fake_manifest.key
# URL of the certificate file
# cert_url=http://example.org/fake_manifest.crt


# Client provisioning for tests that require client machines
# [clients]
# Provisioning server hostname where the clients will be created
# provisioning_server=

# Path on the provisioning server where the virtual images will be stored. If
# not specified in the configuration, the default libvirt path will be used
# "/var/lib/libvirt/images/". Make sure that the path exists on the
# provisioning server.
# image_dir=/opt/robottelo/images


# For tests that uses the images for content-host testcases.
# [distro]
# image_el6=rhel68
# image_el7=rhel73


# For tests that uses the docker feature
# [docker]
# If you have docker deamon running on the server and it is published under a
# unix socket. This will be used by tests that test local docker daemon.
# unix_socket=true
# External docker URL in the format http[s]://<server>:<port>. The
# {server_hostname} variable can be used and will be replaced by
# server.hostname value.
# An external docker is a docker daemon accessed using http, for testing
# purposes accessing localhost via http will be the same as accessing an
# external instance. Make sure that the target daemon can be accessed via http,
# in other words, the daemon is initialized with `--host tcp://0.0.0.0:<port>`.
# This will be used by tests that test external docker daemon.
# external_url=http://localhost:2375
# These will be used by tests that exercise external docker registries. Second
# one will be used by tests that validate updating from one docker registry url
# to another
# External docker registries urls in the format http[s]://<server>[:<port>].
# external_registry_1=
# external_registry_2=


# For testing Red Hat Access Insights
# [rhai]
# Provide link to el6/el7 repo to fetch the redhat-access-insights client rpm
# insights_client_el6repo=https://www.example.com/insights-client/repo/insights-client-6.repo
# insights_client_el7repo=https://www.example.com/insights-client/repo/insights-client-7.repo

# VLAN Networking details
# These settings are required for compute resources testing, for example
# host provisioning on CR's, discovery e.t.c.
# Make sure you have also provided the necessary compute_resources information.
# [vlan_networking]
# subnet=SUBNET_VALUE
# netmask=NETMASK_VALUE
# bridge=BRIDGE_VALUE
# gateway=GATEWAY_VALUE

# For discovery ISO
# Discovery ISO name is required for PXE-less discovery tests. ISO's are
# rebuilt with extra kernel options for unattended pxe-less discovery
# ISO file names should be like below for downstream_el6 and el7 environments:
# foreman-discovery-image-3.0.5-3_unattended_down_el7.iso
# foreman-discovery-image-3.0.5-3_unattended_down_el6.iso
# [discovery]
# discovery_iso=DISCOVERY_ISO

# For OSCAP Testing
# [oscap]
# content_path=~/ssg-rhel6-ds.xml

# Atomic Ostree Kickstart Installer
# [ostree]
# ostree_installer=OSTREE_INSTALLER

# Section for declaring Sat5->Sat6 transition parameters
# [transition]
# URL of the  exported data archive (typically a .tgz containing a bunch of CSV
# files together with repo data)
# exported_data=http://example.org/sat5_export_data.tgz


# Section for performance tests parameters.
# [performance]
# Control whether or not to time on hammer commands in robottelo/cli/base.py
# Default set to be 0, i.e. no timing of performance is measured and thus no
# interference to original robottelo tests.
# time_hammer=false

# Folowing entries are used for preparation of performance tests after a fresh
# install. They will be used by
# `test/foreman/performance/test_standard_prep.py`, which supports:
#
# 1. downloading manifest,
# 2. uploading manifest to subscription,
# 3. updating Red Hat CDN URL,
# 4. enabling key repositories: rhel6-rpms, rhel7-rpms, rhel6-kickstart-rpms,
#    rhel7-kickstart-rpms, rhel6-optional-rpms, rhel7-optional-rpms,
#    rhel6-optional-source-rpms, rhel7-optional-source-rpms,
#    rhel6-optional-debug-rpms, r7-optional-debug-rpms
#
# Note that this preparation step is not required as long as satellite server
# is already configured.
# cdn_address=http://cdn.example.com/pub

# A list of VM IP addresses or hostnames. Each system should already be
# provisioned. They will be used in concurrent system subscription tests.
# virtual_machines=127.0.0.1,127.0.0.1,127.0.0.1,127.0.0.1,127.0.0.1

# Savepoint utility to restore the database. For example, after conducting
# 5,000 concurrent subscription by activation-key using 10 clients, in order to
# start next 5k test case of subscription by register and attach, the
# performance test would restore the database back to the state where there's
# no client registered. All performance test cases would use this setting
#
# User should create savepoint-1 immediately after a fresh installation of
# Satellite.
# fresh_install_savepoint=

# User should create savepoint-2 after enabling repositories, but before
# any system subscription or repository synchronization.
# enabled_repos_savepoint=

# Parameter for number of buckets to be sliced by csv generating function
# Class `ConcurrentTestCase` and its subclasses use this setting when
# computing statistics of each performance test case, grouped in buckets.
# csv_buckets_count=10

# Target repository names to be synchronized by Pulp.
# Target repositories are subset of all enabled repositories.
# Real repository names should be referred by
# `h repository list --organization-id=1`
# target_repos=RHEL 6 Kickstart rpms,RHEL 6 Optional Source rpms

# Number of times to repeat synchronization on each repository
# sync_count=3

# Parameter for deciding whether conduct initial sync or resync
# 'resync' denotes resync; 'sync' denotes initial sync
# sync_type='sync'

# Compute Resources
# [compute_resources]
# External Libvirt Hostname
# libvirt_hostname=

# Path on the Libvirt host, where the virtual images will be stored.
# The default libvirt image dir will be used
# "/var/lib/libvirt/images/".
# libvirt_image_dir=/var/lib/libvirt/images

# Section for PostUpgrade Verification Tests
# [upgrade]
# Option for providing a preUpgrade yaml data file location on server
# upgrade_data=

# section for fake capsule setup.
[fake_capsules]
# a range of ports configured for capsule port mapping represented by a tuple:
#<int>, <int> (no brackets)
# for RHEL7 - the ports needs to have a correct selinux context set:
# 'semanage port -a -t websm_port_t -p tcp <port-range>'
port_range=9091, 14999

# [rhev]
# RHEV to be added as a compute resource.
# hostname: RHEV API URL, for example: https://ovirt.example.com/api
# hostname=
# username: Login for RHEVM
# username=
# password: Password for RHEVM
# password=
# datacenter: RHEVM datacenter, for example: Default
# datacenter=
# vm_name: Name of VM to power On/Off & delete
# vm_name=

# RHEV Compute resource image data
# image_os: Operating system of the image
# image_os=
# image_arch: Architecture of the image
# image_arch=
# image_username: Login to the image
# image_username=
# image_password: Password to the image
# image_password=
# image_name: Image name on the external provider
# image_name=

# [vmware]
# Vmware to be added as a compute resource
# vcenter: vmware vcenter URL
# vcenter=
# username: Login for vmware
# username=
# password: Password for vmware
# password=
# datacenter: vmware datacenter
# datacenter=
# vm_name: Name of VM to power On/Off & delete
# vm_name=

# Vmware Compute resource image data
# image_os: Operating system of the image
# image_os=
# image_arch: Architecture of the image
# image_arch=
# image_username: Login to the image
# image_username=
# image_password: Password to the image
# image_password=
# image_name: Image name on the external provider
# image_name=
