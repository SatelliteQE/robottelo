# Make a copy of this file named robottelo.properties
[server]
# Server hostname
hostname=

# Path to private ssh key to be used when connecting via SSH.
ssh_key=

# HTTP scheme when building the server URL
# Suggested values for "scheme" are "http" and "https".
# scheme=https

# Server port
# port=443

# SSH username
# ssh_username=root

# SSH password if not using a SSH key to connect
# ssh_password=

# Admin username when accessing API and UI
# admin_username=admin

# Admin password when accessing API and UI
# admin_password=changeme

# section for ssh client settings
# [ssh_client]
# Time to wait for the ssh command to finish, in seconds
# command_timeout=300
# Time to wait for establishing the ssh connection, in seconds
# connection_timeout=10

# Override robottelo configuration
[robottelo]
# The directory where screenshots will be saved.
# Note:- Content under /tmp may be deleted after a reboot.
# screenshots_path=/tmp/robottelo/screenshots/
# Enter only 'sat' for Satellite and 'sam' for SAM
# project=sat
# locale=en_US.UTF-8
# Update upstream=false for downstream run
# upstream=true
# Logging verbosity, one of debug, info, warning, error, critical
# verbosity=debug
# Directory for temporary files
# tmp_dir=/var/tmp

# Webdriver logging options
# A list of commands to be logged
# log_driver_commands=newSession,windowMaximize,get,findElement,sendKeysToElement,clickElement,mouseMoveTo

# browser tells robottelo which browser to use when testing UI. Valid values
# are:
# * selenium
# * docker: to use a browser inside a docker container. In order to use this
#   feature make sure that the docker daemon is running locally and has its
#   unix socket published at unix://var/run/docker.sock. Also make sure that
#   the docker image selenium/standalone-firefox is available.
# * saucelabs: makes robottelo run tests on SauceLabs. The saucelabs_user and
#   saucelabs_key are required and the browser used is the same specified on
#   webdriver.  Supported values for webdriver are firefox, chrome and ie, the
#   other valid webdriver values are going to be translated to firefox.
# browser=selenium

# Webdriver to use. Valid values are chrome, firefox, ie, edge, phantomjs, remote
# webdriver=chrome

# Binary location for selected wedriver (not needed if using saucelabs)
# webdriver_binary=/usr/bin/firefox
# webdriver_binary=/usr/bin/chromedriver
# webdriver_binary=C:\\Program Files (x86)\\Microsoft Web Driver\\MicrosoftWebDriver.exe

# webdriver_desired_capabilities accepts extra configuration to be passed to
# saucelabs in order to configure the test options. You can use the platform
# configurator (see link below) to get the information about the environment
# you want to test.
# https://wiki.saucelabs.com/display/DOCS/Platform+Configurator/
# Or you can visit
# https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options for a
# complete set of options.
# PS.: the base DesiredCapabilities dict will be get by the browser
# specified by webdriver config. If you override browserName then that
# browser will be used instead.
# examples:
# (note: version=<browser version>)
# webdriver_desired_capabilities=platform=OS X 10.9,version=45.0,build=myBuildName,parentTunnel=otherUser,seleniumVersion=2.48.0
# webdriver_desired_capabilities=platform=macOS 10.12,version=45.0,build=myBuildName,seleniumVersion=2.48.0,screenResolution=1600x1200
# webdriver_desired_capabilities=platform=Windows 10,version=14.14393,build=myBuildName,seleniumVersion=2.48.0,screenResolution=1600x1200
# webdriver_desired_capabilities=platform=Linux,browserName=chrome,unhandledPromptBehavior=dismiss,unexpectedAlertBehaviour=ignore,acceptInsecureCerts=True
# command_executor=http://127.0.0.1:4444/wd/hub

# saucelabs_user=
# saucelabs_key=

# cdn=true
# Run one datapoint or multiple datapoints for tests
# run_one_datapoint=false

# Enable cleanup of Organizations and Hosts at the test Teardown
# cleanup=true

# Provide link to rhel6/7 repo here, as puppet rpm would require packages from
# RHEL 6/7 repo and syncing the entire repo on the fly would take longer for
# tests to run Specify the *.repo link to an internal repo for tests to execute
# properly
# rhel6_repo=http://example.com/yum/repo_files/rhel6-updates.repo
# rhel7_repo=http://example.com/yum/repo_files/rhel7-updates.repo

# Provide link to rhel6/7 repositories URL as we need all OS packages in order
# to have real installation media for provisioning procedure
# rhel6_os=http://example.com/yum/rhel6-os/
# rhel7_os=http://example.com/yum/rhel7-os/

# If capsule and satellite tools repositories available related packages will
# be pulled from there instead of using the CDN channel. These information is
# more suited to be used for downstream, downstream-iso and zstream builds.
# capsule_repo=http://capsule/repo
# sattools_repo=
#   rhel6=http://sattools/repo/el6,
#   rhel7=http://sattools/repo/el7,

# Bugzilla data to authenticate API calls
# [bugzilla]
# username used when accessing Bugzilla's API
# bz_username=admin

# password used when accessing Bugzilla's API
# bz_password=changeme

# if wontfix_lookup is enabled all decorated BZs found with WONTFIX resolution
# will be fetched from Bugzilla API and those tests deselected
# you may want to set to false to save time when running local tests
# default is true.
# wontfix_lookup = false

# For LDAP Authentication.
# [ldap]
# hostname=
# username=
# password=
# basedn=
# grpbasedn=

# For LDAP freeIPA Authentication.
# [ipa]
# hostname_ipa=
# username_ipa=
# password_ipa=
# basedn_ipa=
# grpbasedn_ipa=
# user_ipa=

# Fake manifest testing.
# [fake_manifest]
# Comma-separated list of urls for multiple manifests
# e.g. url=name1=http://url/1,name2=http://url/2,...
# url=http://url is supported for backward compatibility and is equal to:
# url=default=http://url
# URL of the key file
# key_url=http://example.org/fake_manifest.key
# URL of the certificate file
# cert_url=http://example.org/fake_manifest.crt

# Client provisioning for tests that require client machines
# [clients]
# Provisioning server hostname where the clients will be created
# provisioning_server=
# Comma separated list of distributions, see robottelo/constants.py::DISTRO_*
# distros=rhel6, rhel7

# Path on the provisioning server where the virtual images will be stored. If
# not specified in the configuration, the default libvirt path will be used
# "/var/lib/libvirt/images/". Make sure that the path exists on the
# provisioning server.
# image_dir=/opt/robottelo/disks


# For tests that uses the images for content-host testcases.
# [distro]
# image_el6=rhel68
# image_el7=rhel73
# image_sles11=sles-11-4
# image_sles12=sles-12-3


# For tests that uses the docker feature
# [docker]
# If you have docker deamon running on the server and it is published under a
# unix socket. This will be used by tests that test local docker daemon.
# unix_socket=true
# Name of the libvirt image containing the OS with docker instance set up
# Each test involving external docker instance will instantiate a new VM
# requires [clients] section.
# docker_image=rhel7-docker-base
#
# External docker URL in the format http[s]://<server>:<port>. The
# {server_hostname} variable can be used and will be replaced by
# server.hostname value.
# An external docker is a docker daemon accessed using http, for testing
# purposes accessing localhost via http will be the same as accessing an
# external instance. Make sure that the target daemon can be accessed via http,
# in other words, the daemon is initialized with `--host tcp://0.0.0.0:<port>`.
# This will be used by tests that test external docker daemon.
# external_url=http://localhost:2375
# These will be used by tests that exercise external docker registries. Second
# one will be used by tests that validate updating from one docker registry url
# to another
# External docker registries urls in the format http[s]://<server>[:<port>].
# external_registry_1=
# external_registry_2=
# For testing the support for private registry repos 
# private_registry_url='https://registry.hub.docker.com'
# private_registry_name=username/imagename
# private_registry_username=
# private_registry_password=


# For testing Red Hat Access Insights
# [rhai]
# Provide link to el6/el7 repo to fetch the redhat-access-insights client rpm
# insights_client_el6repo=https://www.example.com/insights-client/repo/insights-client-6.repo
# insights_client_el7repo=https://www.example.com/insights-client/repo/insights-client-7.repo

# VLAN Networking details
# These settings are required for compute resources testing, for example
# host provisioning on CR's, discovery e.t.c.
# Make sure you have also provided the necessary compute_resources information.
# [vlan_networking]
# subnet=SUBNET_VALUE
# netmask=NETMASK_VALUE
# bridge=BRIDGE_VALUE
# gateway=GATEWAY_VALUE
# dhcp_ipam=DHCP|INTERNAL DB
# dhcp_from=IP_RANGE_FROM
# dhcp_to=IP_RANGE_TO
# dns_primary=IP_OF_DNS_SERVER
# network=NETWORK_VALUE (mutually exclusive with bridge)

# For discovery ISO
# Discovery ISO name is required for PXE-less discovery tests. ISO's are
# rebuilt with extra kernel options for unattended pxe-less discovery
# ISO file names should be like below for downstream_el6 and el7 environments:
# foreman-discovery-image-3.0.5-3_unattended_down_el7.iso
# foreman-discovery-image-3.0.5-3_unattended_down_el6.iso
# [discovery]
# discovery_iso=DISCOVERY_ISO

# For OSCAP Testing
# [oscap]
# content_path=~/ssg-rhel6-ds.xml
# tailoring_path=~/ssg-firefox-ds-tailoring.xml

# For katello-certs-check utility
# [certs]
# CERT_FILE=~/certs/server.valid.crt
# KEY_FILE=~/certs/server.key
# REQ_FILE=~/certs/server.csr
# CA_BUNDLE_FILE=~/certs/rootCA.pem

# Atomic Ostree Kickstart Installer
# [ostree]
# ostree_installer=OSTREE_INSTALLER

# Section for performance tests parameters.
# [performance]
# Control whether or not to time on hammer commands in robottelo/cli/base.py
# Default set to be 0, i.e. no timing of performance is measured and thus no
# interference to original robottelo tests.
# time_hammer=false

# Folowing entries are used for preparation of performance tests after a fresh
# install. They will be used by
# `test/foreman/performance/test_standard_prep.py`, which supports:
#
# 1. downloading manifest,
# 2. uploading manifest to subscription,
# 3. updating Red Hat CDN URL,
# 4. enabling key repositories: rhel6-rpms, rhel7-rpms, rhel6-kickstart-rpms,
#    rhel7-kickstart-rpms, rhel6-optional-rpms, rhel7-optional-rpms,
#    rhel6-optional-source-rpms, rhel7-optional-source-rpms,
#    rhel6-optional-debug-rpms, r7-optional-debug-rpms
#
# Note that this preparation step is not required as long as satellite server
# is already configured.
# cdn_address=http://cdn.example.com/pub

# A list of VM IP addresses or hostnames. Each system should already be
# provisioned. They will be used in concurrent system subscription tests.
# virtual_machines=127.0.0.1,127.0.0.1,127.0.0.1,127.0.0.1,127.0.0.1

# Savepoint utility to restore the database. For example, after conducting
# 5,000 concurrent subscription by activation-key using 10 clients, in order to
# start next 5k test case of subscription by register and attach, the
# performance test would restore the database back to the state where there's
# no client registered. All performance test cases would use this setting
#
# User should create savepoint-1 immediately after a fresh installation of
# Satellite.
# fresh_install_savepoint=

# User should create savepoint-2 after enabling repositories, but before
# any system subscription or repository synchronization.
# enabled_repos_savepoint=

# Parameter for number of buckets to be sliced by csv generating function
# Class `ConcurrentTestCase` and its subclasses use this setting when
# computing statistics of each performance test case, grouped in buckets.
# csv_buckets_count=10

# Target repository names to be synchronized by Pulp.
# Target repositories are subset of all enabled repositories.
# Real repository names should be referred by
# `h repository list --organization-id=1`
# target_repos=RHEL 6 Kickstart rpms,RHEL 6 Optional Source rpms

# Number of times to repeat synchronization on each repository
# sync_count=3

# Parameter for deciding whether conduct initial sync or resync
# 'resync' denotes resync; 'sync' denotes initial sync
# sync_type='sync'

# Compute Resources
# [compute_resources]
# External Libvirt Hostname
# libvirt_hostname=

# Path on the Libvirt host, where the virtual images will be stored.
# The default libvirt image dir will be used
# "/var/lib/libvirt/images/".
# libvirt_image_dir=/var/lib/libvirt/images

# Section for PostUpgrade Verification Tests
# [upgrade]
# Option for providing a preUpgrade yaml data file location on server
# upgrade_data=

# section for fake capsule setup.
[fake_capsules]
# a range of ports configured for capsule port mapping represented by a tuple:
#<int>, <int> (no brackets)
# for RHEL7 - the ports needs to have a correct selinux context set:
# 'semanage port -a -t websm_port_t -p tcp <port-range>'
port_range=9091, 14999

# [ec2]
# AWS EC2 to be added as a compute resource.
# Access key ID of the IAM user
# access_key=
# Secret access key of the IAM user
# secret_key=
# The default AWS region for the compute resources
# by default US West (Oregon)
# region=us-west-2
# The default compute resource profile image
# image=
# The default compute resource profile availability zone set it empty if no
# preferences
# availability_zone=eu-west-2a
# default
# The default compute resource profile subnet set it empty if no preferences
# subnet=172.31.0.0/20
# The default compute resource profile security groups (comma separated list)
#  default value is default
# security_groups=default
# The default compute resource profile security managed ip available values Private, Public
# default value is private
# managed_ip=Private


# [rhev]
# RHEV to be added as a compute resource.
# hostname: RHEV API URL, for example: https://ovirt.example.com/api
# hostname=
# username: Login for RHEVM
# username=
# password: Password for RHEVM
# password=
# datacenter: RHEVM datacenter, for example: Default
# datacenter=
# vm_name: Name of VM to power On/Off & delete
# vm_name=
# storage_domain: VM storage domain, possible values NFS-BOS, NFS-SATENG, VMS,
# default value NFS-BOS
# storage_domain=NFS-BOS

# RHEV Compute resource image data
# image_os: Operating system of the image
# image_os=
# image_arch: Architecture of the image
# image_arch=
# image_username: Login to the image
# image_username=
# image_password: Password to the image
# image_password=
# image_name: Image name on the external provider
# image_name=
# RHV CA cert url for adding RHV as compute resource
# ca_cert=

# [vmware]
# Vmware to be added as a compute resource
# vcenter: vmware vcenter URL
# vcenter=
# username: Login for vmware
# username=
# password: Password for vmware
# password=
# datacenter: vmware datacenter
# datacenter=
# vm_name: Name of VM to power On/Off & delete
# vm_name=

# Vmware Compute resource image data
# image_os: Operating system of the image
# image_os=
# image_arch: Architecture of the image
# image_arch=
# image_username: Login to the image
# image_username=
# image_password: Password to the image
# image_password=
# image_name: Image name on the external provider
# image_name=

# [osp]
# Openstack to be added as a compute resource
# hostname: Openstack api url For eg: https://hostname:port/v2.0/tokens
# hostname=
# username: Login for Openstack
# username=
# password: Password for Openstack
# password=
# tenant: Openstack tenant to be used
# tenant=
# security_group: Name of group for provisioning
# security_group=
# vm_name: Name of VM to power On/Off & delete
# vm_name=

# Openstack Compute resource image data
# image_os: Operating system of the image
# image_os=
# image_arch: Architecture of the image
# image_arch=
# image_username: Login to the image
# image_username=
# image_name: Image name on the external provider
# image_name=

# section for real capsule
# [capsule]
# to setup a real capsule we need the capsule virtual machine hostname
# resolvable.
# we should register a hostname and get a hash value that we should use on the
# stage of ddns setup
# domain is the base ddns domain, the virtual machine hostname will be a sub
# domain of this domain.
# domain=
# the instance_name is the key used in the registration above, and used to name
# the instance of the virtual machine
# the real finale hostname should be instance_name.domain
# instance_name=
# the hash is the hash value returned in ddns registration
# hash=
# ddns rpm package to install on the virtual machine to setup ddns hostname
# resolution
# ddns_package_url=

# Section for shared function
# [shared_function]
# The default storage handler to use, available handlers: file, redis
# by default storage=file
# storage=file
# Namespace scope by default used the md5 of kattelo certificate of the server
# scope=
# enabled, by default enabled=false, the shared decorator will
# immediately run the function and the function result data are not saved
# to enable the shared functionality set enabled=true
# enabled=false
# The lock timeout, to be able to use the shared data, each caller have to lock
# the access to storage to have consistent values, by default 2 hours, to be
# able to handle long running functions, the value is in second
# lock_timeout=7200
# How much time the shared data is considered valid, the value is in second
# by default 24 hours
# share_timeout=86400
# If redis is used as storage, by default redis_host=localhost
# redis_host=localhost
# The port redis is accessible at that redis_host, by default 6379
# redis_port=6379
# The redis db index, by default 0
# redis_db=0
# The redis password index, by default None
# redis_password=
# How much time we retry if a function call fail, by default call_retries=2
# call_retries=2
